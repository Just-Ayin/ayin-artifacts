/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as PoolFactoryContractJson } from "../clamm/factory/PoolFactory.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  CurrentPoolInfo,
  FactoryProtectedData,
  FactoryRoles,
  ModifyLiquidity,
  ModifyLiquidityScriptParams,
  NewStruct,
  NextTick,
  PendingBalance,
  PoolData,
  PoolKey,
  Position,
  PositionKey,
  TickInfo,
  TickUpdateInfo,
  AllStructs,
} from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace PoolFactoryTypes {
  export type Fields = {
    deployer: Address;
    protocolFeeSetter: Address;
    feeSink: Address;
    admin: Address;
    newAdmin: Address;
    upgrader: Address;
    poolTemplateId: HexString;
    pairSize: bigint;
  };

  export type State = ContractState<Fields>;

  export type PairCreatedEvent = ContractEvent<{
    token0: HexString;
    token1: HexString;
    pair: HexString;
    currentPairSize: bigint;
    tickSpacing: bigint;
    feePerMil: bigint;
  }>;

  export interface CallMethodTable {
    getRoles: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<FactoryRoles>;
    };
    claimProtocolFees: {
      params: CallContractParams<{ tokenIds: HexString }>;
      result: CallContractResult<null>;
    };
    getPool: {
      params: CallContractParams<{ poolKey: PoolKey }>;
      result: CallContractResult<HexString>;
    };
    deposit: {
      params: CallContractParams<{
        sender: Address;
        tokenId: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    getPendingUserBalance: {
      params: CallContractParams<{ tokenId: HexString }>;
      result: CallContractResult<bigint>;
    };
    getSqrtPriceX96: {
      params: CallContractParams<{ poolKey: PoolKey }>;
      result: CallContractResult<bigint>;
    };
    withdrawAllN: {
      params: CallContractParams<{ beneficiary: Address; tokenIds: HexString }>;
      result: CallContractResult<null>;
    };
    createPairPermisionless: {
      params: CallContractParams<{
        payer: Address;
        poolKey: PoolKey;
        initialPriceX96: bigint;
      }>;
      result: CallContractResult<HexString>;
    };
    createPairWithPermissions: {
      params: CallContractParams<{
        payer: Address;
        poolKey: PoolKey;
        initialPriceX96: bigint;
      }>;
      result: CallContractResult<HexString>;
    };
    modifyLiquidity: {
      params: CallContractParams<{
        payer: Address;
        key: PoolKey;
        tickLower: bigint;
        tickUpper: bigint;
        liquidityDelta: bigint;
        salt: HexString;
      }>;
      result: CallContractResult<[bigint, bigint]>;
    };
    claimFees: {
      params: CallContractParams<{
        refundAddress: Address;
        poolKey: PoolKey;
        tickLower: bigint;
        tickUpper: bigint;
        salt: HexString;
      }>;
      result: CallContractResult<[bigint, bigint]>;
    };
    swap: {
      params: CallContractParams<{
        key: PoolKey;
        zeroForOne: boolean;
        amountSpecified: bigint;
        priceLimit: bigint;
      }>;
      result: CallContractResult<[bigint, bigint]>;
    };
    depositAndSwap: {
      params: CallContractParams<{
        payer: Address;
        key: PoolKey;
        zeroForOne: boolean;
        amountSpecified: bigint;
        priceLimit: bigint;
      }>;
      result: CallContractResult<[bigint, bigint]>;
    };
    getVersion: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    changeAdmin: {
      params: CallContractParams<{ newAdminArg: Address }>;
      result: CallContractResult<null>;
    };
    assertAdmin: {
      params: CallContractParams<{ caller: Address }>;
      result: CallContractResult<null>;
    };
    acceptAdmin: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    setFeeSink: {
      params: CallContractParams<{ feeSinkArg: Address }>;
      result: CallContractResult<null>;
    };
    setDeployer: {
      params: CallContractParams<{ deployerArg: Address }>;
      result: CallContractResult<null>;
    };
    setUpgrader: {
      params: CallContractParams<{ upgraderArg: Address }>;
      result: CallContractResult<null>;
    };
    setProtocolFeeSetter: {
      params: CallContractParams<{ protocolFeeSetterArg: Address }>;
      result: CallContractResult<null>;
    };
    setPoolTemplateId: {
      params: CallContractParams<{ poolTemplateIdArg: HexString }>;
      result: CallContractResult<null>;
    };
    modifyPoolFeeProtocol: {
      params: CallContractParams<{ poolKey: PoolKey; newFeeProtocol: bigint }>;
      result: CallContractResult<null>;
    };
    areTokensSorted: {
      params: CallContractParams<{ tokenA: HexString; tokenB: HexString }>;
      result: CallContractResult<boolean>;
    };
    serializePoolKey: {
      params: CallContractParams<{ poolKey: PoolKey }>;
      result: CallContractResult<HexString>;
    };
    initializeTokenBalance: {
      params: CallContractParams<{ payer: Address; tokenId: HexString }>;
      result: CallContractResult<null>;
    };
    getTokenBalances: {
      params: CallContractParams<{ poolKey: PoolKey }>;
      result: CallContractResult<[bigint, bigint]>;
    };
    isValidSpacingFeePair: {
      params: CallContractParams<{ feePerMil: bigint; tickSpacing: bigint }>;
      result: CallContractResult<boolean>;
    };
    createPair: {
      params: CallContractParams<{
        payer: Address;
        poolKey: PoolKey;
        initialPriceX96: bigint;
      }>;
      result: CallContractResult<HexString>;
    };
    addBalanceDeltas: {
      params: CallContractParams<{
        pool: HexString;
        token0: HexString;
        token1: HexString;
        userDelta0: bigint;
        userDelta1: bigint;
        protocol0: bigint;
        protocol1: bigint;
      }>;
      result: CallContractResult<null>;
    };
    upgrade: {
      params: CallContractParams<{
        newCode: HexString;
        newImmFieldsEncoded: HexString;
        newMutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getRoles: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    claimProtocolFees: {
      params: SignExecuteContractMethodParams<{ tokenIds: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    getPool: {
      params: SignExecuteContractMethodParams<{ poolKey: PoolKey }>;
      result: SignExecuteScriptTxResult;
    };
    deposit: {
      params: SignExecuteContractMethodParams<{
        sender: Address;
        tokenId: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getPendingUserBalance: {
      params: SignExecuteContractMethodParams<{ tokenId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    getSqrtPriceX96: {
      params: SignExecuteContractMethodParams<{ poolKey: PoolKey }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawAllN: {
      params: SignExecuteContractMethodParams<{
        beneficiary: Address;
        tokenIds: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createPairPermisionless: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        poolKey: PoolKey;
        initialPriceX96: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createPairWithPermissions: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        poolKey: PoolKey;
        initialPriceX96: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    modifyLiquidity: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        key: PoolKey;
        tickLower: bigint;
        tickUpper: bigint;
        liquidityDelta: bigint;
        salt: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    claimFees: {
      params: SignExecuteContractMethodParams<{
        refundAddress: Address;
        poolKey: PoolKey;
        tickLower: bigint;
        tickUpper: bigint;
        salt: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    swap: {
      params: SignExecuteContractMethodParams<{
        key: PoolKey;
        zeroForOne: boolean;
        amountSpecified: bigint;
        priceLimit: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    depositAndSwap: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        key: PoolKey;
        zeroForOne: boolean;
        amountSpecified: bigint;
        priceLimit: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getVersion: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    changeAdmin: {
      params: SignExecuteContractMethodParams<{ newAdminArg: Address }>;
      result: SignExecuteScriptTxResult;
    };
    assertAdmin: {
      params: SignExecuteContractMethodParams<{ caller: Address }>;
      result: SignExecuteScriptTxResult;
    };
    acceptAdmin: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setFeeSink: {
      params: SignExecuteContractMethodParams<{ feeSinkArg: Address }>;
      result: SignExecuteScriptTxResult;
    };
    setDeployer: {
      params: SignExecuteContractMethodParams<{ deployerArg: Address }>;
      result: SignExecuteScriptTxResult;
    };
    setUpgrader: {
      params: SignExecuteContractMethodParams<{ upgraderArg: Address }>;
      result: SignExecuteScriptTxResult;
    };
    setProtocolFeeSetter: {
      params: SignExecuteContractMethodParams<{
        protocolFeeSetterArg: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    setPoolTemplateId: {
      params: SignExecuteContractMethodParams<{ poolTemplateIdArg: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    modifyPoolFeeProtocol: {
      params: SignExecuteContractMethodParams<{
        poolKey: PoolKey;
        newFeeProtocol: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    areTokensSorted: {
      params: SignExecuteContractMethodParams<{
        tokenA: HexString;
        tokenB: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    serializePoolKey: {
      params: SignExecuteContractMethodParams<{ poolKey: PoolKey }>;
      result: SignExecuteScriptTxResult;
    };
    initializeTokenBalance: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        tokenId: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getTokenBalances: {
      params: SignExecuteContractMethodParams<{ poolKey: PoolKey }>;
      result: SignExecuteScriptTxResult;
    };
    isValidSpacingFeePair: {
      params: SignExecuteContractMethodParams<{
        feePerMil: bigint;
        tickSpacing: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createPair: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        poolKey: PoolKey;
        initialPriceX96: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    addBalanceDeltas: {
      params: SignExecuteContractMethodParams<{
        pool: HexString;
        token0: HexString;
        token1: HexString;
        userDelta0: bigint;
        userDelta1: bigint;
        protocol0: bigint;
        protocol1: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    upgrade: {
      params: SignExecuteContractMethodParams<{
        newCode: HexString;
        newImmFieldsEncoded: HexString;
        newMutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { pendingBalances?: Map<HexString, PendingBalance> };
}

class Factory extends ContractFactory<
  PoolFactoryInstance,
  PoolFactoryTypes.Fields
> {
  encodeFields(fields: PoolFactoryTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { PairCreated: 0 };
  consts = {
    MinTick: BigInt("-887272"),
    MaxTick: BigInt("887272"),
    HalfUnitX96: BigInt("39614081257132168796771975168"),
    UnitX96: BigInt("79228162514264337593543950336"),
    UnitX128: BigInt("340282366920938463463374607431768211456"),
    DoubleUnitX96: BigInt("158456325028528675187087900672"),
    U160Limit: BigInt("1461501637330902918203684832716283019655932542976"),
    MaxFee: BigInt("1000000"),
    MinSqrtPrice: BigInt("4295128739"),
    MaxSqrtPrice: BigInt("1461446703485210103287273052203988822378723970342"),
    Version: BigInt("1"),
    DefaultProtocolFee: BigInt("200000"),
    ErrorCodes: {
      NotAdmin: BigInt("100"),
      NotNewAdmin: BigInt("101"),
      NotDeployer: BigInt("102"),
      NotInitialized: BigInt("103"),
      NotFactory: BigInt("104"),
      TokensNotSorted: BigInt("105"),
      FeeTooHigh: BigInt("106"),
      TickSpacingZero: BigInt("107"),
      NotFeeSetter: BigInt("108"),
      InvalidFeeAndSpacing: BigInt("109"),
      NotUpgrader: BigInt("110"),
      IdenticalTokenIds: BigInt("200"),
      TickOOB: BigInt("201"),
      SqrtRatioOOB: BigInt("202"),
      ProductOverflow: BigInt("203"),
      SqrtPriceTooLow: BigInt("204"),
      SqrtPriceZero: BigInt("205"),
      LiquidityZero: BigInt("206"),
      ResultExceeds160Bits: BigInt("207"),
      TickTooLow: BigInt("208"),
      TickTooHigh: BigInt("209"),
      TicksUnordered: BigInt("210"),
      TokenIdsSizeInvalid: BigInt("211"),
      TickNotMultipleOfSpacing: BigInt("212"),
      TickSpacingNonPositive: BigInt("213"),
      LowerTickNotMultiple: BigInt("214"),
      UpperTickNotMultiple: BigInt("215"),
      PriceLimitOOB: BigInt("216"),
      IncorrectTokenIndex: BigInt("800"),
      NFTNotFound: BigInt("801"),
      NFTNotPartOfCollection: BigInt("802"),
      MissingNFTInput: BigInt("803"),
      MinimumAmountOutNotReached: BigInt("900"),
      UnknownPoolType: BigInt("901"),
      UnsupportedPoolType: BigInt("902"),
    },
  };

  at(address: string): PoolFactoryInstance {
    return new PoolFactoryInstance(address);
  }

  tests = {
    getRoles: async (
      params: Omit<
        TestContractParams<
          PoolFactoryTypes.Fields,
          never,
          PoolFactoryTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<FactoryRoles, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "getRoles", params, getContractByCodeHash);
    },
    claimProtocolFees: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { tokenIds: HexString },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "claimProtocolFees",
        params,
        getContractByCodeHash
      );
    },
    getPool: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { poolKey: PoolKey },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<HexString, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "getPool", params, getContractByCodeHash);
    },
    deposit: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { sender: Address; tokenId: HexString; amount: bigint },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<bigint, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    getPendingUserBalance: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { tokenId: HexString },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<bigint, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "getPendingUserBalance",
        params,
        getContractByCodeHash
      );
    },
    getSqrtPriceX96: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { poolKey: PoolKey },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<bigint, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "getSqrtPriceX96", params, getContractByCodeHash);
    },
    withdrawAllN: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { beneficiary: Address; tokenIds: HexString },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "withdrawAllN", params, getContractByCodeHash);
    },
    createPairPermisionless: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { payer: Address; poolKey: PoolKey; initialPriceX96: bigint },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<HexString, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "createPairPermisionless",
        params,
        getContractByCodeHash
      );
    },
    createPairWithPermissions: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { payer: Address; poolKey: PoolKey; initialPriceX96: bigint },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<HexString, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "createPairWithPermissions",
        params,
        getContractByCodeHash
      );
    },
    modifyLiquidity: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        {
          payer: Address;
          key: PoolKey;
          tickLower: bigint;
          tickUpper: bigint;
          liquidityDelta: bigint;
          salt: HexString;
        },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<[bigint, bigint], PoolFactoryTypes.Maps>> => {
      return testMethod(this, "modifyLiquidity", params, getContractByCodeHash);
    },
    claimFees: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        {
          refundAddress: Address;
          poolKey: PoolKey;
          tickLower: bigint;
          tickUpper: bigint;
          salt: HexString;
        },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<[bigint, bigint], PoolFactoryTypes.Maps>> => {
      return testMethod(this, "claimFees", params, getContractByCodeHash);
    },
    swap: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        {
          key: PoolKey;
          zeroForOne: boolean;
          amountSpecified: bigint;
          priceLimit: bigint;
        },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<[bigint, bigint], PoolFactoryTypes.Maps>> => {
      return testMethod(this, "swap", params, getContractByCodeHash);
    },
    depositAndSwap: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        {
          payer: Address;
          key: PoolKey;
          zeroForOne: boolean;
          amountSpecified: bigint;
          priceLimit: bigint;
        },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<[bigint, bigint], PoolFactoryTypes.Maps>> => {
      return testMethod(this, "depositAndSwap", params, getContractByCodeHash);
    },
    getVersion: async (
      params: Omit<
        TestContractParams<
          PoolFactoryTypes.Fields,
          never,
          PoolFactoryTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "getVersion", params, getContractByCodeHash);
    },
    changeAdmin: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { newAdminArg: Address },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "changeAdmin", params, getContractByCodeHash);
    },
    assertAdmin: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { caller: Address },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "assertAdmin", params, getContractByCodeHash);
    },
    acceptAdmin: async (
      params: Omit<
        TestContractParams<
          PoolFactoryTypes.Fields,
          never,
          PoolFactoryTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "acceptAdmin", params, getContractByCodeHash);
    },
    setFeeSink: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { feeSinkArg: Address },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "setFeeSink", params, getContractByCodeHash);
    },
    setDeployer: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { deployerArg: Address },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "setDeployer", params, getContractByCodeHash);
    },
    setUpgrader: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { upgraderArg: Address },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "setUpgrader", params, getContractByCodeHash);
    },
    setProtocolFeeSetter: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { protocolFeeSetterArg: Address },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "setProtocolFeeSetter",
        params,
        getContractByCodeHash
      );
    },
    setPoolTemplateId: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { poolTemplateIdArg: HexString },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "setPoolTemplateId",
        params,
        getContractByCodeHash
      );
    },
    modifyPoolFeeProtocol: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { poolKey: PoolKey; newFeeProtocol: bigint },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "modifyPoolFeeProtocol",
        params,
        getContractByCodeHash
      );
    },
    areTokensSorted: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { tokenA: HexString; tokenB: HexString },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<boolean, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "areTokensSorted", params, getContractByCodeHash);
    },
    serializePoolKey: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { poolKey: PoolKey },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<HexString, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "serializePoolKey",
        params,
        getContractByCodeHash
      );
    },
    initializeTokenBalance: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { payer: Address; tokenId: HexString },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "initializeTokenBalance",
        params,
        getContractByCodeHash
      );
    },
    getTokenBalances: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { poolKey: PoolKey },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<[bigint, bigint], PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "getTokenBalances",
        params,
        getContractByCodeHash
      );
    },
    isValidSpacingFeePair: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { feePerMil: bigint; tickSpacing: bigint },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<boolean, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "isValidSpacingFeePair",
        params,
        getContractByCodeHash
      );
    },
    createPair: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        { payer: Address; poolKey: PoolKey; initialPriceX96: bigint },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<HexString, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "createPair", params, getContractByCodeHash);
    },
    addBalanceDeltas: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        {
          pool: HexString;
          token0: HexString;
          token1: HexString;
          userDelta0: bigint;
          userDelta1: bigint;
          protocol0: bigint;
          protocol1: bigint;
        },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(
        this,
        "addBalanceDeltas",
        params,
        getContractByCodeHash
      );
    },
    upgrade: async (
      params: TestContractParams<
        PoolFactoryTypes.Fields,
        {
          newCode: HexString;
          newImmFieldsEncoded: HexString;
          newMutFieldsEncoded: HexString;
        },
        PoolFactoryTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolFactoryTypes.Maps>> => {
      return testMethod(this, "upgrade", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: PoolFactoryTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: PoolFactoryTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const PoolFactory = new Factory(
  Contract.fromJson(
    PoolFactoryContractJson,
    "=104-2+26=2-2=1-2=2-1=1-1+8c=1+6=1+2=1-1+75c=2-2+76=2497-1+2=37-1+c=38+7a7e0214696e73657274206174206d617020706174683a2000=1196",
    "8f4c4fbf0149915c0c59aaa91b6c041d0228288078fbe949fa850299adff10f1",
    AllStructs
  )
);
registerContract(PoolFactory);

// Use this class to interact with the blockchain
export class PoolFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    pendingBalances: new RalphMap<HexString, PendingBalance>(
      PoolFactory.contract,
      this.contractId,
      "pendingBalances"
    ),
  };

  async fetchState(): Promise<PoolFactoryTypes.State> {
    return fetchContractState(PoolFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribePairCreatedEvent(
    options: EventSubscribeOptions<PoolFactoryTypes.PairCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoolFactory.contract,
      this,
      options,
      "PairCreated",
      fromCount
    );
  }

  view = {
    getRoles: async (
      params?: PoolFactoryTypes.CallMethodParams<"getRoles">
    ): Promise<PoolFactoryTypes.CallMethodResult<"getRoles">> => {
      return callMethod(
        PoolFactory,
        this,
        "getRoles",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    claimProtocolFees: async (
      params: PoolFactoryTypes.CallMethodParams<"claimProtocolFees">
    ): Promise<PoolFactoryTypes.CallMethodResult<"claimProtocolFees">> => {
      return callMethod(
        PoolFactory,
        this,
        "claimProtocolFees",
        params,
        getContractByCodeHash
      );
    },
    getPool: async (
      params: PoolFactoryTypes.CallMethodParams<"getPool">
    ): Promise<PoolFactoryTypes.CallMethodResult<"getPool">> => {
      return callMethod(
        PoolFactory,
        this,
        "getPool",
        params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: PoolFactoryTypes.CallMethodParams<"deposit">
    ): Promise<PoolFactoryTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        PoolFactory,
        this,
        "deposit",
        params,
        getContractByCodeHash
      );
    },
    getPendingUserBalance: async (
      params: PoolFactoryTypes.CallMethodParams<"getPendingUserBalance">
    ): Promise<PoolFactoryTypes.CallMethodResult<"getPendingUserBalance">> => {
      return callMethod(
        PoolFactory,
        this,
        "getPendingUserBalance",
        params,
        getContractByCodeHash
      );
    },
    getSqrtPriceX96: async (
      params: PoolFactoryTypes.CallMethodParams<"getSqrtPriceX96">
    ): Promise<PoolFactoryTypes.CallMethodResult<"getSqrtPriceX96">> => {
      return callMethod(
        PoolFactory,
        this,
        "getSqrtPriceX96",
        params,
        getContractByCodeHash
      );
    },
    withdrawAllN: async (
      params: PoolFactoryTypes.CallMethodParams<"withdrawAllN">
    ): Promise<PoolFactoryTypes.CallMethodResult<"withdrawAllN">> => {
      return callMethod(
        PoolFactory,
        this,
        "withdrawAllN",
        params,
        getContractByCodeHash
      );
    },
    createPairPermisionless: async (
      params: PoolFactoryTypes.CallMethodParams<"createPairPermisionless">
    ): Promise<
      PoolFactoryTypes.CallMethodResult<"createPairPermisionless">
    > => {
      return callMethod(
        PoolFactory,
        this,
        "createPairPermisionless",
        params,
        getContractByCodeHash
      );
    },
    createPairWithPermissions: async (
      params: PoolFactoryTypes.CallMethodParams<"createPairWithPermissions">
    ): Promise<
      PoolFactoryTypes.CallMethodResult<"createPairWithPermissions">
    > => {
      return callMethod(
        PoolFactory,
        this,
        "createPairWithPermissions",
        params,
        getContractByCodeHash
      );
    },
    modifyLiquidity: async (
      params: PoolFactoryTypes.CallMethodParams<"modifyLiquidity">
    ): Promise<PoolFactoryTypes.CallMethodResult<"modifyLiquidity">> => {
      return callMethod(
        PoolFactory,
        this,
        "modifyLiquidity",
        params,
        getContractByCodeHash
      );
    },
    claimFees: async (
      params: PoolFactoryTypes.CallMethodParams<"claimFees">
    ): Promise<PoolFactoryTypes.CallMethodResult<"claimFees">> => {
      return callMethod(
        PoolFactory,
        this,
        "claimFees",
        params,
        getContractByCodeHash
      );
    },
    swap: async (
      params: PoolFactoryTypes.CallMethodParams<"swap">
    ): Promise<PoolFactoryTypes.CallMethodResult<"swap">> => {
      return callMethod(
        PoolFactory,
        this,
        "swap",
        params,
        getContractByCodeHash
      );
    },
    depositAndSwap: async (
      params: PoolFactoryTypes.CallMethodParams<"depositAndSwap">
    ): Promise<PoolFactoryTypes.CallMethodResult<"depositAndSwap">> => {
      return callMethod(
        PoolFactory,
        this,
        "depositAndSwap",
        params,
        getContractByCodeHash
      );
    },
    getVersion: async (
      params?: PoolFactoryTypes.CallMethodParams<"getVersion">
    ): Promise<PoolFactoryTypes.CallMethodResult<"getVersion">> => {
      return callMethod(
        PoolFactory,
        this,
        "getVersion",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    changeAdmin: async (
      params: PoolFactoryTypes.CallMethodParams<"changeAdmin">
    ): Promise<PoolFactoryTypes.CallMethodResult<"changeAdmin">> => {
      return callMethod(
        PoolFactory,
        this,
        "changeAdmin",
        params,
        getContractByCodeHash
      );
    },
    assertAdmin: async (
      params: PoolFactoryTypes.CallMethodParams<"assertAdmin">
    ): Promise<PoolFactoryTypes.CallMethodResult<"assertAdmin">> => {
      return callMethod(
        PoolFactory,
        this,
        "assertAdmin",
        params,
        getContractByCodeHash
      );
    },
    acceptAdmin: async (
      params?: PoolFactoryTypes.CallMethodParams<"acceptAdmin">
    ): Promise<PoolFactoryTypes.CallMethodResult<"acceptAdmin">> => {
      return callMethod(
        PoolFactory,
        this,
        "acceptAdmin",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setFeeSink: async (
      params: PoolFactoryTypes.CallMethodParams<"setFeeSink">
    ): Promise<PoolFactoryTypes.CallMethodResult<"setFeeSink">> => {
      return callMethod(
        PoolFactory,
        this,
        "setFeeSink",
        params,
        getContractByCodeHash
      );
    },
    setDeployer: async (
      params: PoolFactoryTypes.CallMethodParams<"setDeployer">
    ): Promise<PoolFactoryTypes.CallMethodResult<"setDeployer">> => {
      return callMethod(
        PoolFactory,
        this,
        "setDeployer",
        params,
        getContractByCodeHash
      );
    },
    setUpgrader: async (
      params: PoolFactoryTypes.CallMethodParams<"setUpgrader">
    ): Promise<PoolFactoryTypes.CallMethodResult<"setUpgrader">> => {
      return callMethod(
        PoolFactory,
        this,
        "setUpgrader",
        params,
        getContractByCodeHash
      );
    },
    setProtocolFeeSetter: async (
      params: PoolFactoryTypes.CallMethodParams<"setProtocolFeeSetter">
    ): Promise<PoolFactoryTypes.CallMethodResult<"setProtocolFeeSetter">> => {
      return callMethod(
        PoolFactory,
        this,
        "setProtocolFeeSetter",
        params,
        getContractByCodeHash
      );
    },
    setPoolTemplateId: async (
      params: PoolFactoryTypes.CallMethodParams<"setPoolTemplateId">
    ): Promise<PoolFactoryTypes.CallMethodResult<"setPoolTemplateId">> => {
      return callMethod(
        PoolFactory,
        this,
        "setPoolTemplateId",
        params,
        getContractByCodeHash
      );
    },
    modifyPoolFeeProtocol: async (
      params: PoolFactoryTypes.CallMethodParams<"modifyPoolFeeProtocol">
    ): Promise<PoolFactoryTypes.CallMethodResult<"modifyPoolFeeProtocol">> => {
      return callMethod(
        PoolFactory,
        this,
        "modifyPoolFeeProtocol",
        params,
        getContractByCodeHash
      );
    },
    areTokensSorted: async (
      params: PoolFactoryTypes.CallMethodParams<"areTokensSorted">
    ): Promise<PoolFactoryTypes.CallMethodResult<"areTokensSorted">> => {
      return callMethod(
        PoolFactory,
        this,
        "areTokensSorted",
        params,
        getContractByCodeHash
      );
    },
    serializePoolKey: async (
      params: PoolFactoryTypes.CallMethodParams<"serializePoolKey">
    ): Promise<PoolFactoryTypes.CallMethodResult<"serializePoolKey">> => {
      return callMethod(
        PoolFactory,
        this,
        "serializePoolKey",
        params,
        getContractByCodeHash
      );
    },
    initializeTokenBalance: async (
      params: PoolFactoryTypes.CallMethodParams<"initializeTokenBalance">
    ): Promise<PoolFactoryTypes.CallMethodResult<"initializeTokenBalance">> => {
      return callMethod(
        PoolFactory,
        this,
        "initializeTokenBalance",
        params,
        getContractByCodeHash
      );
    },
    getTokenBalances: async (
      params: PoolFactoryTypes.CallMethodParams<"getTokenBalances">
    ): Promise<PoolFactoryTypes.CallMethodResult<"getTokenBalances">> => {
      return callMethod(
        PoolFactory,
        this,
        "getTokenBalances",
        params,
        getContractByCodeHash
      );
    },
    isValidSpacingFeePair: async (
      params: PoolFactoryTypes.CallMethodParams<"isValidSpacingFeePair">
    ): Promise<PoolFactoryTypes.CallMethodResult<"isValidSpacingFeePair">> => {
      return callMethod(
        PoolFactory,
        this,
        "isValidSpacingFeePair",
        params,
        getContractByCodeHash
      );
    },
    createPair: async (
      params: PoolFactoryTypes.CallMethodParams<"createPair">
    ): Promise<PoolFactoryTypes.CallMethodResult<"createPair">> => {
      return callMethod(
        PoolFactory,
        this,
        "createPair",
        params,
        getContractByCodeHash
      );
    },
    addBalanceDeltas: async (
      params: PoolFactoryTypes.CallMethodParams<"addBalanceDeltas">
    ): Promise<PoolFactoryTypes.CallMethodResult<"addBalanceDeltas">> => {
      return callMethod(
        PoolFactory,
        this,
        "addBalanceDeltas",
        params,
        getContractByCodeHash
      );
    },
    upgrade: async (
      params: PoolFactoryTypes.CallMethodParams<"upgrade">
    ): Promise<PoolFactoryTypes.CallMethodResult<"upgrade">> => {
      return callMethod(
        PoolFactory,
        this,
        "upgrade",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getRoles: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"getRoles">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"getRoles">> => {
      return signExecuteMethod(PoolFactory, this, "getRoles", params);
    },
    claimProtocolFees: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"claimProtocolFees">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"claimProtocolFees">
    > => {
      return signExecuteMethod(PoolFactory, this, "claimProtocolFees", params);
    },
    getPool: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"getPool">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"getPool">> => {
      return signExecuteMethod(PoolFactory, this, "getPool", params);
    },
    deposit: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"deposit">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(PoolFactory, this, "deposit", params);
    },
    getPendingUserBalance: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"getPendingUserBalance">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"getPendingUserBalance">
    > => {
      return signExecuteMethod(
        PoolFactory,
        this,
        "getPendingUserBalance",
        params
      );
    },
    getSqrtPriceX96: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"getSqrtPriceX96">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"getSqrtPriceX96">> => {
      return signExecuteMethod(PoolFactory, this, "getSqrtPriceX96", params);
    },
    withdrawAllN: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"withdrawAllN">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"withdrawAllN">> => {
      return signExecuteMethod(PoolFactory, this, "withdrawAllN", params);
    },
    createPairPermisionless: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"createPairPermisionless">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"createPairPermisionless">
    > => {
      return signExecuteMethod(
        PoolFactory,
        this,
        "createPairPermisionless",
        params
      );
    },
    createPairWithPermissions: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"createPairWithPermissions">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"createPairWithPermissions">
    > => {
      return signExecuteMethod(
        PoolFactory,
        this,
        "createPairWithPermissions",
        params
      );
    },
    modifyLiquidity: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"modifyLiquidity">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"modifyLiquidity">> => {
      return signExecuteMethod(PoolFactory, this, "modifyLiquidity", params);
    },
    claimFees: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"claimFees">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"claimFees">> => {
      return signExecuteMethod(PoolFactory, this, "claimFees", params);
    },
    swap: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"swap">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"swap">> => {
      return signExecuteMethod(PoolFactory, this, "swap", params);
    },
    depositAndSwap: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"depositAndSwap">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"depositAndSwap">> => {
      return signExecuteMethod(PoolFactory, this, "depositAndSwap", params);
    },
    getVersion: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"getVersion">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"getVersion">> => {
      return signExecuteMethod(PoolFactory, this, "getVersion", params);
    },
    changeAdmin: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"changeAdmin">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"changeAdmin">> => {
      return signExecuteMethod(PoolFactory, this, "changeAdmin", params);
    },
    assertAdmin: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"assertAdmin">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"assertAdmin">> => {
      return signExecuteMethod(PoolFactory, this, "assertAdmin", params);
    },
    acceptAdmin: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"acceptAdmin">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"acceptAdmin">> => {
      return signExecuteMethod(PoolFactory, this, "acceptAdmin", params);
    },
    setFeeSink: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"setFeeSink">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"setFeeSink">> => {
      return signExecuteMethod(PoolFactory, this, "setFeeSink", params);
    },
    setDeployer: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"setDeployer">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"setDeployer">> => {
      return signExecuteMethod(PoolFactory, this, "setDeployer", params);
    },
    setUpgrader: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"setUpgrader">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"setUpgrader">> => {
      return signExecuteMethod(PoolFactory, this, "setUpgrader", params);
    },
    setProtocolFeeSetter: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"setProtocolFeeSetter">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"setProtocolFeeSetter">
    > => {
      return signExecuteMethod(
        PoolFactory,
        this,
        "setProtocolFeeSetter",
        params
      );
    },
    setPoolTemplateId: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"setPoolTemplateId">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"setPoolTemplateId">
    > => {
      return signExecuteMethod(PoolFactory, this, "setPoolTemplateId", params);
    },
    modifyPoolFeeProtocol: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"modifyPoolFeeProtocol">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"modifyPoolFeeProtocol">
    > => {
      return signExecuteMethod(
        PoolFactory,
        this,
        "modifyPoolFeeProtocol",
        params
      );
    },
    areTokensSorted: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"areTokensSorted">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"areTokensSorted">> => {
      return signExecuteMethod(PoolFactory, this, "areTokensSorted", params);
    },
    serializePoolKey: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"serializePoolKey">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"serializePoolKey">
    > => {
      return signExecuteMethod(PoolFactory, this, "serializePoolKey", params);
    },
    initializeTokenBalance: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"initializeTokenBalance">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"initializeTokenBalance">
    > => {
      return signExecuteMethod(
        PoolFactory,
        this,
        "initializeTokenBalance",
        params
      );
    },
    getTokenBalances: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"getTokenBalances">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"getTokenBalances">
    > => {
      return signExecuteMethod(PoolFactory, this, "getTokenBalances", params);
    },
    isValidSpacingFeePair: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"isValidSpacingFeePair">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"isValidSpacingFeePair">
    > => {
      return signExecuteMethod(
        PoolFactory,
        this,
        "isValidSpacingFeePair",
        params
      );
    },
    createPair: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"createPair">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"createPair">> => {
      return signExecuteMethod(PoolFactory, this, "createPair", params);
    },
    addBalanceDeltas: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"addBalanceDeltas">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"addBalanceDeltas">
    > => {
      return signExecuteMethod(PoolFactory, this, "addBalanceDeltas", params);
    },
    upgrade: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"upgrade">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"upgrade">> => {
      return signExecuteMethod(PoolFactory, this, "upgrade", params);
    },
  };

  async multicall<Calls extends PoolFactoryTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PoolFactoryTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends PoolFactoryTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<PoolFactoryTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | PoolFactoryTypes.MultiCallParams
      | PoolFactoryTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      PoolFactory,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
