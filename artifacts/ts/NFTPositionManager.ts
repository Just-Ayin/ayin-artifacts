/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as NFTPositionManagerContractJson } from "../clamm/staking/NFTPositionManager.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  CurrentPoolInfo,
  FactoryProtectedData,
  FactoryRoles,
  IncentiveKey,
  ModifyLiquidity,
  ModifyLiquidityScriptParams,
  NewStruct,
  NextTick,
  ObservationCL,
  ObservationTP,
  PendingBalance,
  PoolData,
  PoolKey,
  Position,
  PositionKey,
  StakeCLInfo,
  StakerCLData,
  StakerCLIncentive,
  TickInfo,
  TickUpdateInfo,
  AllStructs,
} from "./types";

// Custom types for the contract
export namespace NFTPositionManagerTypes {
  export type Fields = {
    factory: HexString;
    collectionUri: HexString;
    nftUriPrefix: HexString;
    nftTemplateId: HexString;
    incentiveTemplateId: HexString;
    totalSupply: bigint;
    nextIndex: bigint;
    admin: Address;
    newAdmin: Address;
    feeSink: Address;
    incentivizer: Address;
    stakerData: StakerCLData;
  };

  export type State = ContractState<Fields>;

  export type NFTMintedEvent = ContractEvent<{
    owner: Address;
    nftId: HexString;
    nftIndex: bigint;
  }>;
  export type NFTBurnedEvent = ContractEvent<{
    owner: Address;
    nftId: HexString;
    nftIndex: bigint;
  }>;

  export interface CallMethodTable {
    getCollectionUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    totalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    nftByIndex: {
      params: CallContractParams<{ index: bigint }>;
      result: CallContractResult<HexString>;
    };
    validateNFT: {
      params: CallContractParams<{ nftId: HexString; nftIndex: bigint }>;
      result: CallContractResult<null>;
    };
    modifyLiquidity: {
      params: CallContractParams<{
        payer: Address;
        nftOwner: Address;
        key: PoolKey;
        tickLower: bigint;
        tickUpper: bigint;
        liquidityDelta: bigint;
        nftIndex: bigint;
      }>;
      result: CallContractResult<[bigint, bigint, HexString]>;
    };
    claimFees: {
      params: CallContractParams<{
        refundAddress: Address;
        nftOwner: Address;
        nftIndex: bigint;
      }>;
      result: CallContractResult<[bigint, bigint]>;
    };
    getIncentiveFactory: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    createIncentive: {
      params: CallContractParams<{
        payer: Address;
        key: IncentiveKey;
        reward: bigint;
      }>;
      result: CallContractResult<null>;
    };
    stake: {
      params: CallContractParams<{
        nftOwner: Address;
        nftIndex: bigint;
        incentiveKey: IncentiveKey;
      }>;
      result: CallContractResult<bigint>;
    };
    unstake: {
      params: CallContractParams<{
        nftOwner: Address;
        nftIndex: bigint;
        incentiveKey: IncentiveKey;
        refundAddress: Address;
      }>;
      result: CallContractResult<null>;
    };
    getVersion: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    mintNft: {
      params: CallContractParams<{
        payer: Address;
        pool: HexString;
        poolKey: PoolKey;
        positionKey: PositionKey;
        to: Address;
      }>;
      result: CallContractResult<HexString>;
    };
    burnNft: {
      params: CallContractParams<{
        refundAddress: Address;
        nft: HexString;
        nftIndex: bigint;
        nftOwner: Address;
      }>;
      result: CallContractResult<null>;
    };
    setupIncentiveFactory: {
      params: CallContractParams<{ payer: Address; templateId: HexString }>;
      result: CallContractResult<null>;
    };
    claimRewards: {
      params: CallContractParams<{
        nftOwner: Address;
        nftIndex: bigint;
        incentiveKey: IncentiveKey;
        refundAddress: Address;
      }>;
      result: CallContractResult<bigint>;
    };
    claimIncentivizeFees: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    changeAdmin: {
      params: CallContractParams<{ newAdminArg: Address }>;
      result: CallContractResult<null>;
    };
    assertAdmin: {
      params: CallContractParams<{ caller: Address }>;
      result: CallContractResult<null>;
    };
    acceptAdmin: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    setFeeSink: {
      params: CallContractParams<{ newFeeSink: Address }>;
      result: CallContractResult<null>;
    };
    setIncentivizer: {
      params: CallContractParams<{ newIncentivizer: Address }>;
      result: CallContractResult<null>;
    };
    getNftTemplateId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    setStakerData: {
      params: CallContractParams<{
        incentivizeFee: bigint;
        maxIncentiveStartLeadTime: bigint;
        maxIncentiveDuration: bigint;
      }>;
      result: CallContractResult<null>;
    };
    getInitialDataForPosition: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    upgrade: {
      params: CallContractParams<{
        newCode: HexString;
        newImmFieldsEncoded: HexString;
        newMutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getCollectionUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    totalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    nftByIndex: {
      params: SignExecuteContractMethodParams<{ index: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    validateNFT: {
      params: SignExecuteContractMethodParams<{
        nftId: HexString;
        nftIndex: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    modifyLiquidity: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        nftOwner: Address;
        key: PoolKey;
        tickLower: bigint;
        tickUpper: bigint;
        liquidityDelta: bigint;
        nftIndex: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    claimFees: {
      params: SignExecuteContractMethodParams<{
        refundAddress: Address;
        nftOwner: Address;
        nftIndex: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getIncentiveFactory: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    createIncentive: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        key: IncentiveKey;
        reward: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    stake: {
      params: SignExecuteContractMethodParams<{
        nftOwner: Address;
        nftIndex: bigint;
        incentiveKey: IncentiveKey;
      }>;
      result: SignExecuteScriptTxResult;
    };
    unstake: {
      params: SignExecuteContractMethodParams<{
        nftOwner: Address;
        nftIndex: bigint;
        incentiveKey: IncentiveKey;
        refundAddress: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getVersion: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    mintNft: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        pool: HexString;
        poolKey: PoolKey;
        positionKey: PositionKey;
        to: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    burnNft: {
      params: SignExecuteContractMethodParams<{
        refundAddress: Address;
        nft: HexString;
        nftIndex: bigint;
        nftOwner: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    setupIncentiveFactory: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        templateId: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    claimRewards: {
      params: SignExecuteContractMethodParams<{
        nftOwner: Address;
        nftIndex: bigint;
        incentiveKey: IncentiveKey;
        refundAddress: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    claimIncentivizeFees: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    changeAdmin: {
      params: SignExecuteContractMethodParams<{ newAdminArg: Address }>;
      result: SignExecuteScriptTxResult;
    };
    assertAdmin: {
      params: SignExecuteContractMethodParams<{ caller: Address }>;
      result: SignExecuteScriptTxResult;
    };
    acceptAdmin: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setFeeSink: {
      params: SignExecuteContractMethodParams<{ newFeeSink: Address }>;
      result: SignExecuteScriptTxResult;
    };
    setIncentivizer: {
      params: SignExecuteContractMethodParams<{ newIncentivizer: Address }>;
      result: SignExecuteScriptTxResult;
    };
    getNftTemplateId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setStakerData: {
      params: SignExecuteContractMethodParams<{
        incentivizeFee: bigint;
        maxIncentiveStartLeadTime: bigint;
        maxIncentiveDuration: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getInitialDataForPosition: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    upgrade: {
      params: SignExecuteContractMethodParams<{
        newCode: HexString;
        newImmFieldsEncoded: HexString;
        newMutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  NFTPositionManagerInstance,
  NFTPositionManagerTypes.Fields
> {
  encodeFields(fields: NFTPositionManagerTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { NFTMinted: 0, NFTBurned: 1 };
  consts = {
    MaxStakes: BigInt("8"),
    StakeCLInfoLen: BigInt("64"),
    StakeCLInfosLen: BigInt("512"),
    MinSqrtPrice: BigInt("4295128739"),
    MaxSqrtPrice: BigInt("1461446703485210103287273052203988822378723970342"),
    Version: BigInt("2"),
    ErrorCodes: {
      NotAdmin: BigInt("100"),
      NotNewAdmin: BigInt("101"),
      NotDeployer: BigInt("102"),
      NotInitialized: BigInt("103"),
      NotFactory: BigInt("104"),
      TokensNotSorted: BigInt("105"),
      FeeTooHigh: BigInt("106"),
      TickSpacingZero: BigInt("107"),
      NotFeeSetter: BigInt("108"),
      InvalidFeeAndSpacing: BigInt("109"),
      NotUpgrader: BigInt("110"),
      UpgradeInProgress: BigInt("111"),
      MigrateTokenIdsSizeInvalid: BigInt("112"),
      IdenticalTokenIds: BigInt("200"),
      TickOOB: BigInt("201"),
      SqrtRatioOOB: BigInt("202"),
      ProductOverflow: BigInt("203"),
      SqrtPriceTooLow: BigInt("204"),
      SqrtPriceZero: BigInt("205"),
      LiquidityZero: BigInt("206"),
      ResultExceeds160Bits: BigInt("207"),
      TickTooLow: BigInt("208"),
      TickTooHigh: BigInt("209"),
      TicksUnordered: BigInt("210"),
      TokenIdsSizeInvalid: BigInt("211"),
      TickNotMultipleOfSpacing: BigInt("212"),
      TickSpacingNonPositive: BigInt("213"),
      LowerTickNotMultiple: BigInt("214"),
      UpperTickNotMultiple: BigInt("215"),
      PriceLimitOOB: BigInt("216"),
      TickUninitialized: BigInt("217"),
      TokenNotInPool: BigInt("218"),
      PositionIsStaked: BigInt("219"),
      InvariantNotConverged: BigInt("300"),
      BalanceUpdateNotConverged: BigInt("301"),
      CoinIndexOutOfBounds: BigInt("302"),
      SameCoinIndices: BigInt("303"),
      IncorrectTokenIndex: BigInt("800"),
      NFTNotFound: BigInt("801"),
      NFTNotPartOfCollection: BigInt("802"),
      MissingNFTInput: BigInt("803"),
      NFTUpgradeSameVersion: BigInt("804"),
      NFTUpgradeBadCodeHash: BigInt("805"),
      IncentiveRewardZero: BigInt("810"),
      IncentiveStartTimeTooEarly: BigInt("811"),
      StartTimeAfterEndTime: BigInt("812"),
      StartTimeTooFarInTheFuture: BigInt("813"),
      IncentiveDurationTooLong: BigInt("814"),
      NotNFTPositionManager: BigInt("815"),
      StakeNotFound: BigInt("816"),
      TooManyStakes: BigInt("817"),
      StakeAlreadyExists: BigInt("818"),
      EmptyStakeNotAllowed: BigInt("819"),
      TooEarlyToStake: BigInt("820"),
      TooLateToStake: BigInt("821"),
      IncentiveNotFound: BigInt("822"),
      MinimumAmountOutNotReached: BigInt("900"),
      UnknownPoolType: BigInt("901"),
      UnsupportedPoolType: BigInt("902"),
    },
  };

  at(address: string): NFTPositionManagerInstance {
    return new NFTPositionManagerInstance(address);
  }

  tests = {
    getCollectionUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getCollectionUri",
        params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "totalSupply", params, getContractByCodeHash);
    },
    nftByIndex: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        { index: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "nftByIndex", params, getContractByCodeHash);
    },
    validateNFT: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        { nftId: HexString; nftIndex: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "validateNFT", params, getContractByCodeHash);
    },
    modifyLiquidity: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        {
          payer: Address;
          nftOwner: Address;
          key: PoolKey;
          tickLower: bigint;
          tickUpper: bigint;
          liquidityDelta: bigint;
          nftIndex: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, bigint, HexString]>> => {
      return testMethod(this, "modifyLiquidity", params, getContractByCodeHash);
    },
    claimFees: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        { refundAddress: Address; nftOwner: Address; nftIndex: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, bigint]>> => {
      return testMethod(this, "claimFees", params, getContractByCodeHash);
    },
    getIncentiveFactory: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getIncentiveFactory",
        params,
        getContractByCodeHash
      );
    },
    createIncentive: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        { payer: Address; key: IncentiveKey; reward: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "createIncentive", params, getContractByCodeHash);
    },
    stake: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        { nftOwner: Address; nftIndex: bigint; incentiveKey: IncentiveKey }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "stake", params, getContractByCodeHash);
    },
    unstake: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        {
          nftOwner: Address;
          nftIndex: bigint;
          incentiveKey: IncentiveKey;
          refundAddress: Address;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "unstake", params, getContractByCodeHash);
    },
    getVersion: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getVersion", params, getContractByCodeHash);
    },
    mintNft: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        {
          payer: Address;
          pool: HexString;
          poolKey: PoolKey;
          positionKey: PositionKey;
          to: Address;
        }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "mintNft", params, getContractByCodeHash);
    },
    burnNft: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        {
          refundAddress: Address;
          nft: HexString;
          nftIndex: bigint;
          nftOwner: Address;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "burnNft", params, getContractByCodeHash);
    },
    setupIncentiveFactory: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        { payer: Address; templateId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "setupIncentiveFactory",
        params,
        getContractByCodeHash
      );
    },
    claimRewards: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        {
          nftOwner: Address;
          nftIndex: bigint;
          incentiveKey: IncentiveKey;
          refundAddress: Address;
        }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "claimRewards", params, getContractByCodeHash);
    },
    claimIncentivizeFees: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "claimIncentivizeFees",
        params,
        getContractByCodeHash
      );
    },
    changeAdmin: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        { newAdminArg: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "changeAdmin", params, getContractByCodeHash);
    },
    assertAdmin: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertAdmin", params, getContractByCodeHash);
    },
    acceptAdmin: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "acceptAdmin", params, getContractByCodeHash);
    },
    setFeeSink: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        { newFeeSink: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setFeeSink", params, getContractByCodeHash);
    },
    setIncentivizer: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        { newIncentivizer: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setIncentivizer", params, getContractByCodeHash);
    },
    getNftTemplateId: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getNftTemplateId",
        params,
        getContractByCodeHash
      );
    },
    setStakerData: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        {
          incentivizeFee: bigint;
          maxIncentiveStartLeadTime: bigint;
          maxIncentiveDuration: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setStakerData", params, getContractByCodeHash);
    },
    getInitialDataForPosition: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getInitialDataForPosition",
        params,
        getContractByCodeHash
      );
    },
    upgrade: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionManagerTypes.Fields,
        {
          newCode: HexString;
          newImmFieldsEncoded: HexString;
          newMutFieldsEncoded: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "upgrade", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: NFTPositionManagerTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const NFTPositionManager = new Factory(
  Contract.fromJson(
    NFTPositionManagerContractJson,
    "",
    "0ea695d310dc57958709ee2fe6a72ffbfffa93e2be6fd2335ffd62259bc2a45e",
    AllStructs
  )
);
registerContract(NFTPositionManager);

// Use this class to interact with the blockchain
export class NFTPositionManagerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTPositionManagerTypes.State> {
    return fetchContractState(NFTPositionManager, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNFTMintedEvent(
    options: EventSubscribeOptions<NFTPositionManagerTypes.NFTMintedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTPositionManager.contract,
      this,
      options,
      "NFTMinted",
      fromCount
    );
  }

  subscribeNFTBurnedEvent(
    options: EventSubscribeOptions<NFTPositionManagerTypes.NFTBurnedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTPositionManager.contract,
      this,
      options,
      "NFTBurned",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | NFTPositionManagerTypes.NFTMintedEvent
      | NFTPositionManagerTypes.NFTBurnedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      NFTPositionManager.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    getCollectionUri: async (
      params?: NFTPositionManagerTypes.CallMethodParams<"getCollectionUri">
    ): Promise<
      NFTPositionManagerTypes.CallMethodResult<"getCollectionUri">
    > => {
      return callMethod(
        NFTPositionManager,
        this,
        "getCollectionUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    totalSupply: async (
      params?: NFTPositionManagerTypes.CallMethodParams<"totalSupply">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"totalSupply">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "totalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    nftByIndex: async (
      params: NFTPositionManagerTypes.CallMethodParams<"nftByIndex">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"nftByIndex">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "nftByIndex",
        params,
        getContractByCodeHash
      );
    },
    validateNFT: async (
      params: NFTPositionManagerTypes.CallMethodParams<"validateNFT">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"validateNFT">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "validateNFT",
        params,
        getContractByCodeHash
      );
    },
    modifyLiquidity: async (
      params: NFTPositionManagerTypes.CallMethodParams<"modifyLiquidity">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"modifyLiquidity">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "modifyLiquidity",
        params,
        getContractByCodeHash
      );
    },
    claimFees: async (
      params: NFTPositionManagerTypes.CallMethodParams<"claimFees">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"claimFees">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "claimFees",
        params,
        getContractByCodeHash
      );
    },
    getIncentiveFactory: async (
      params?: NFTPositionManagerTypes.CallMethodParams<"getIncentiveFactory">
    ): Promise<
      NFTPositionManagerTypes.CallMethodResult<"getIncentiveFactory">
    > => {
      return callMethod(
        NFTPositionManager,
        this,
        "getIncentiveFactory",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    createIncentive: async (
      params: NFTPositionManagerTypes.CallMethodParams<"createIncentive">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"createIncentive">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "createIncentive",
        params,
        getContractByCodeHash
      );
    },
    stake: async (
      params: NFTPositionManagerTypes.CallMethodParams<"stake">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"stake">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "stake",
        params,
        getContractByCodeHash
      );
    },
    unstake: async (
      params: NFTPositionManagerTypes.CallMethodParams<"unstake">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"unstake">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "unstake",
        params,
        getContractByCodeHash
      );
    },
    getVersion: async (
      params?: NFTPositionManagerTypes.CallMethodParams<"getVersion">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"getVersion">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "getVersion",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    mintNft: async (
      params: NFTPositionManagerTypes.CallMethodParams<"mintNft">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"mintNft">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "mintNft",
        params,
        getContractByCodeHash
      );
    },
    burnNft: async (
      params: NFTPositionManagerTypes.CallMethodParams<"burnNft">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"burnNft">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "burnNft",
        params,
        getContractByCodeHash
      );
    },
    setupIncentiveFactory: async (
      params: NFTPositionManagerTypes.CallMethodParams<"setupIncentiveFactory">
    ): Promise<
      NFTPositionManagerTypes.CallMethodResult<"setupIncentiveFactory">
    > => {
      return callMethod(
        NFTPositionManager,
        this,
        "setupIncentiveFactory",
        params,
        getContractByCodeHash
      );
    },
    claimRewards: async (
      params: NFTPositionManagerTypes.CallMethodParams<"claimRewards">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"claimRewards">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "claimRewards",
        params,
        getContractByCodeHash
      );
    },
    claimIncentivizeFees: async (
      params?: NFTPositionManagerTypes.CallMethodParams<"claimIncentivizeFees">
    ): Promise<
      NFTPositionManagerTypes.CallMethodResult<"claimIncentivizeFees">
    > => {
      return callMethod(
        NFTPositionManager,
        this,
        "claimIncentivizeFees",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    changeAdmin: async (
      params: NFTPositionManagerTypes.CallMethodParams<"changeAdmin">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"changeAdmin">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "changeAdmin",
        params,
        getContractByCodeHash
      );
    },
    assertAdmin: async (
      params: NFTPositionManagerTypes.CallMethodParams<"assertAdmin">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"assertAdmin">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "assertAdmin",
        params,
        getContractByCodeHash
      );
    },
    acceptAdmin: async (
      params?: NFTPositionManagerTypes.CallMethodParams<"acceptAdmin">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"acceptAdmin">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "acceptAdmin",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setFeeSink: async (
      params: NFTPositionManagerTypes.CallMethodParams<"setFeeSink">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"setFeeSink">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "setFeeSink",
        params,
        getContractByCodeHash
      );
    },
    setIncentivizer: async (
      params: NFTPositionManagerTypes.CallMethodParams<"setIncentivizer">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"setIncentivizer">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "setIncentivizer",
        params,
        getContractByCodeHash
      );
    },
    getNftTemplateId: async (
      params?: NFTPositionManagerTypes.CallMethodParams<"getNftTemplateId">
    ): Promise<
      NFTPositionManagerTypes.CallMethodResult<"getNftTemplateId">
    > => {
      return callMethod(
        NFTPositionManager,
        this,
        "getNftTemplateId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setStakerData: async (
      params: NFTPositionManagerTypes.CallMethodParams<"setStakerData">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"setStakerData">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "setStakerData",
        params,
        getContractByCodeHash
      );
    },
    getInitialDataForPosition: async (
      params?: NFTPositionManagerTypes.CallMethodParams<"getInitialDataForPosition">
    ): Promise<
      NFTPositionManagerTypes.CallMethodResult<"getInitialDataForPosition">
    > => {
      return callMethod(
        NFTPositionManager,
        this,
        "getInitialDataForPosition",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    upgrade: async (
      params: NFTPositionManagerTypes.CallMethodParams<"upgrade">
    ): Promise<NFTPositionManagerTypes.CallMethodResult<"upgrade">> => {
      return callMethod(
        NFTPositionManager,
        this,
        "upgrade",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getCollectionUri: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"getCollectionUri">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"getCollectionUri">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "getCollectionUri",
        params
      );
    },
    totalSupply: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"totalSupply">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"totalSupply">
    > => {
      return signExecuteMethod(NFTPositionManager, this, "totalSupply", params);
    },
    nftByIndex: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"nftByIndex">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"nftByIndex">
    > => {
      return signExecuteMethod(NFTPositionManager, this, "nftByIndex", params);
    },
    validateNFT: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"validateNFT">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"validateNFT">
    > => {
      return signExecuteMethod(NFTPositionManager, this, "validateNFT", params);
    },
    modifyLiquidity: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"modifyLiquidity">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"modifyLiquidity">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "modifyLiquidity",
        params
      );
    },
    claimFees: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"claimFees">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"claimFees">
    > => {
      return signExecuteMethod(NFTPositionManager, this, "claimFees", params);
    },
    getIncentiveFactory: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"getIncentiveFactory">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"getIncentiveFactory">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "getIncentiveFactory",
        params
      );
    },
    createIncentive: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"createIncentive">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"createIncentive">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "createIncentive",
        params
      );
    },
    stake: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"stake">
    ): Promise<NFTPositionManagerTypes.SignExecuteMethodResult<"stake">> => {
      return signExecuteMethod(NFTPositionManager, this, "stake", params);
    },
    unstake: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"unstake">
    ): Promise<NFTPositionManagerTypes.SignExecuteMethodResult<"unstake">> => {
      return signExecuteMethod(NFTPositionManager, this, "unstake", params);
    },
    getVersion: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"getVersion">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"getVersion">
    > => {
      return signExecuteMethod(NFTPositionManager, this, "getVersion", params);
    },
    mintNft: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"mintNft">
    ): Promise<NFTPositionManagerTypes.SignExecuteMethodResult<"mintNft">> => {
      return signExecuteMethod(NFTPositionManager, this, "mintNft", params);
    },
    burnNft: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"burnNft">
    ): Promise<NFTPositionManagerTypes.SignExecuteMethodResult<"burnNft">> => {
      return signExecuteMethod(NFTPositionManager, this, "burnNft", params);
    },
    setupIncentiveFactory: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"setupIncentiveFactory">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"setupIncentiveFactory">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "setupIncentiveFactory",
        params
      );
    },
    claimRewards: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"claimRewards">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"claimRewards">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "claimRewards",
        params
      );
    },
    claimIncentivizeFees: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"claimIncentivizeFees">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"claimIncentivizeFees">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "claimIncentivizeFees",
        params
      );
    },
    changeAdmin: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"changeAdmin">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"changeAdmin">
    > => {
      return signExecuteMethod(NFTPositionManager, this, "changeAdmin", params);
    },
    assertAdmin: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"assertAdmin">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"assertAdmin">
    > => {
      return signExecuteMethod(NFTPositionManager, this, "assertAdmin", params);
    },
    acceptAdmin: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"acceptAdmin">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"acceptAdmin">
    > => {
      return signExecuteMethod(NFTPositionManager, this, "acceptAdmin", params);
    },
    setFeeSink: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"setFeeSink">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"setFeeSink">
    > => {
      return signExecuteMethod(NFTPositionManager, this, "setFeeSink", params);
    },
    setIncentivizer: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"setIncentivizer">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"setIncentivizer">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "setIncentivizer",
        params
      );
    },
    getNftTemplateId: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"getNftTemplateId">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"getNftTemplateId">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "getNftTemplateId",
        params
      );
    },
    setStakerData: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"setStakerData">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"setStakerData">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "setStakerData",
        params
      );
    },
    getInitialDataForPosition: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"getInitialDataForPosition">
    ): Promise<
      NFTPositionManagerTypes.SignExecuteMethodResult<"getInitialDataForPosition">
    > => {
      return signExecuteMethod(
        NFTPositionManager,
        this,
        "getInitialDataForPosition",
        params
      );
    },
    upgrade: async (
      params: NFTPositionManagerTypes.SignExecuteMethodParams<"upgrade">
    ): Promise<NFTPositionManagerTypes.SignExecuteMethodResult<"upgrade">> => {
      return signExecuteMethod(NFTPositionManager, this, "upgrade", params);
    },
  };

  async multicall<Calls extends NFTPositionManagerTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NFTPositionManagerTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends NFTPositionManagerTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<NFTPositionManagerTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | NFTPositionManagerTypes.MultiCallParams
      | NFTPositionManagerTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      NFTPositionManager,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
