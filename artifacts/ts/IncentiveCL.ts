/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as IncentiveCLContractJson } from "../clamm/staking/IncentiveCL.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  CurrentPoolInfo,
  FactoryProtectedData,
  FactoryRoles,
  IncentiveKey,
  ModifyLiquidity,
  ModifyLiquidityScriptParams,
  NewStruct,
  NextTick,
  ObservationCL,
  ObservationTP,
  PendingBalance,
  PoolData,
  PoolKey,
  Position,
  PositionKey,
  StakeCLInfo,
  StakerCLData,
  StakerCLIncentive,
  TickInfo,
  TickUpdateInfo,
  AllStructs,
} from "./types";

// Custom types for the contract
export namespace IncentiveCLTypes {
  export type Fields = {
    creator: Address;
    managerContractId: HexString;
    rewardToken: HexString;
    startTime: bigint;
    endTime: bigint;
    incentive: StakerCLIncentive;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    mulDiv: {
      params: CallContractParams<{ a: bigint; b: bigint; denom: bigint }>;
      result: CallContractResult<bigint>;
    };
    mulDivCeil: {
      params: CallContractParams<{ a: bigint; b: bigint; denom: bigint }>;
      result: CallContractResult<bigint>;
    };
    get: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<StakerCLIncentive>;
    };
    getRewardToken: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getStartTime: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getEndTime: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    calculateReward: {
      params: CallContractParams<{
        secondsInsideX128: bigint;
        timestampSeconds: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    set: {
      params: CallContractParams<{ newIncentive: StakerCLIncentive }>;
      result: CallContractResult<null>;
    };
    deposit: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    unstake: {
      params: CallContractParams<{
        refundAddress: Address;
        secondsStakedX128: bigint;
        secondsInsideX128: bigint;
      }>;
      result: CallContractResult<null>;
    };
    takeRemainigRewards: {
      params: CallContractParams<{ refundAddress: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    mulDiv: {
      params: SignExecuteContractMethodParams<{
        a: bigint;
        b: bigint;
        denom: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    mulDivCeil: {
      params: SignExecuteContractMethodParams<{
        a: bigint;
        b: bigint;
        denom: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    get: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getRewardToken: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getStartTime: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getEndTime: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    calculateReward: {
      params: SignExecuteContractMethodParams<{
        secondsInsideX128: bigint;
        timestampSeconds: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    set: {
      params: SignExecuteContractMethodParams<{
        newIncentive: StakerCLIncentive;
      }>;
      result: SignExecuteScriptTxResult;
    };
    deposit: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    unstake: {
      params: SignExecuteContractMethodParams<{
        refundAddress: Address;
        secondsStakedX128: bigint;
        secondsInsideX128: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    takeRemainigRewards: {
      params: SignExecuteContractMethodParams<{ refundAddress: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  IncentiveCLInstance,
  IncentiveCLTypes.Fields
> {
  encodeFields(fields: IncentiveCLTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  consts = { RemainingRewardLockTime: BigInt("2592000") };

  at(address: string): IncentiveCLInstance {
    return new IncentiveCLInstance(address);
  }

  tests = {
    mulDiv: async (
      params: TestContractParamsWithoutMaps<
        IncentiveCLTypes.Fields,
        { a: bigint; b: bigint; denom: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "mulDiv", params, getContractByCodeHash);
    },
    mulDivCeil: async (
      params: TestContractParamsWithoutMaps<
        IncentiveCLTypes.Fields,
        { a: bigint; b: bigint; denom: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "mulDivCeil", params, getContractByCodeHash);
    },
    get: async (
      params: Omit<
        TestContractParamsWithoutMaps<IncentiveCLTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<StakerCLIncentive>> => {
      return testMethod(this, "get", params, getContractByCodeHash);
    },
    getRewardToken: async (
      params: Omit<
        TestContractParamsWithoutMaps<IncentiveCLTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getRewardToken", params, getContractByCodeHash);
    },
    getStartTime: async (
      params: Omit<
        TestContractParamsWithoutMaps<IncentiveCLTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getStartTime", params, getContractByCodeHash);
    },
    getEndTime: async (
      params: Omit<
        TestContractParamsWithoutMaps<IncentiveCLTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getEndTime", params, getContractByCodeHash);
    },
    calculateReward: async (
      params: TestContractParamsWithoutMaps<
        IncentiveCLTypes.Fields,
        { secondsInsideX128: bigint; timestampSeconds: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "calculateReward", params, getContractByCodeHash);
    },
    set: async (
      params: TestContractParamsWithoutMaps<
        IncentiveCLTypes.Fields,
        { newIncentive: StakerCLIncentive }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "set", params, getContractByCodeHash);
    },
    deposit: async (
      params: TestContractParamsWithoutMaps<
        IncentiveCLTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    unstake: async (
      params: TestContractParamsWithoutMaps<
        IncentiveCLTypes.Fields,
        {
          refundAddress: Address;
          secondsStakedX128: bigint;
          secondsInsideX128: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "unstake", params, getContractByCodeHash);
    },
    takeRemainigRewards: async (
      params: TestContractParamsWithoutMaps<
        IncentiveCLTypes.Fields,
        { refundAddress: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "takeRemainigRewards",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: IncentiveCLTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const IncentiveCL = new Factory(
  Contract.fromJson(
    IncentiveCLContractJson,
    "",
    "a4997742fa0deca9d32f979bc9169e03e335d8a90fb4e7a4b21790378a1a5673",
    AllStructs
  )
);
registerContract(IncentiveCL);

// Use this class to interact with the blockchain
export class IncentiveCLInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<IncentiveCLTypes.State> {
    return fetchContractState(IncentiveCL, this);
  }

  view = {
    mulDiv: async (
      params: IncentiveCLTypes.CallMethodParams<"mulDiv">
    ): Promise<IncentiveCLTypes.CallMethodResult<"mulDiv">> => {
      return callMethod(
        IncentiveCL,
        this,
        "mulDiv",
        params,
        getContractByCodeHash
      );
    },
    mulDivCeil: async (
      params: IncentiveCLTypes.CallMethodParams<"mulDivCeil">
    ): Promise<IncentiveCLTypes.CallMethodResult<"mulDivCeil">> => {
      return callMethod(
        IncentiveCL,
        this,
        "mulDivCeil",
        params,
        getContractByCodeHash
      );
    },
    get: async (
      params?: IncentiveCLTypes.CallMethodParams<"get">
    ): Promise<IncentiveCLTypes.CallMethodResult<"get">> => {
      return callMethod(
        IncentiveCL,
        this,
        "get",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getRewardToken: async (
      params?: IncentiveCLTypes.CallMethodParams<"getRewardToken">
    ): Promise<IncentiveCLTypes.CallMethodResult<"getRewardToken">> => {
      return callMethod(
        IncentiveCL,
        this,
        "getRewardToken",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getStartTime: async (
      params?: IncentiveCLTypes.CallMethodParams<"getStartTime">
    ): Promise<IncentiveCLTypes.CallMethodResult<"getStartTime">> => {
      return callMethod(
        IncentiveCL,
        this,
        "getStartTime",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getEndTime: async (
      params?: IncentiveCLTypes.CallMethodParams<"getEndTime">
    ): Promise<IncentiveCLTypes.CallMethodResult<"getEndTime">> => {
      return callMethod(
        IncentiveCL,
        this,
        "getEndTime",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    calculateReward: async (
      params: IncentiveCLTypes.CallMethodParams<"calculateReward">
    ): Promise<IncentiveCLTypes.CallMethodResult<"calculateReward">> => {
      return callMethod(
        IncentiveCL,
        this,
        "calculateReward",
        params,
        getContractByCodeHash
      );
    },
    set: async (
      params: IncentiveCLTypes.CallMethodParams<"set">
    ): Promise<IncentiveCLTypes.CallMethodResult<"set">> => {
      return callMethod(
        IncentiveCL,
        this,
        "set",
        params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: IncentiveCLTypes.CallMethodParams<"deposit">
    ): Promise<IncentiveCLTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        IncentiveCL,
        this,
        "deposit",
        params,
        getContractByCodeHash
      );
    },
    unstake: async (
      params: IncentiveCLTypes.CallMethodParams<"unstake">
    ): Promise<IncentiveCLTypes.CallMethodResult<"unstake">> => {
      return callMethod(
        IncentiveCL,
        this,
        "unstake",
        params,
        getContractByCodeHash
      );
    },
    takeRemainigRewards: async (
      params: IncentiveCLTypes.CallMethodParams<"takeRemainigRewards">
    ): Promise<IncentiveCLTypes.CallMethodResult<"takeRemainigRewards">> => {
      return callMethod(
        IncentiveCL,
        this,
        "takeRemainigRewards",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    mulDiv: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"mulDiv">
    ): Promise<IncentiveCLTypes.SignExecuteMethodResult<"mulDiv">> => {
      return signExecuteMethod(IncentiveCL, this, "mulDiv", params);
    },
    mulDivCeil: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"mulDivCeil">
    ): Promise<IncentiveCLTypes.SignExecuteMethodResult<"mulDivCeil">> => {
      return signExecuteMethod(IncentiveCL, this, "mulDivCeil", params);
    },
    get: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"get">
    ): Promise<IncentiveCLTypes.SignExecuteMethodResult<"get">> => {
      return signExecuteMethod(IncentiveCL, this, "get", params);
    },
    getRewardToken: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"getRewardToken">
    ): Promise<IncentiveCLTypes.SignExecuteMethodResult<"getRewardToken">> => {
      return signExecuteMethod(IncentiveCL, this, "getRewardToken", params);
    },
    getStartTime: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"getStartTime">
    ): Promise<IncentiveCLTypes.SignExecuteMethodResult<"getStartTime">> => {
      return signExecuteMethod(IncentiveCL, this, "getStartTime", params);
    },
    getEndTime: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"getEndTime">
    ): Promise<IncentiveCLTypes.SignExecuteMethodResult<"getEndTime">> => {
      return signExecuteMethod(IncentiveCL, this, "getEndTime", params);
    },
    calculateReward: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"calculateReward">
    ): Promise<IncentiveCLTypes.SignExecuteMethodResult<"calculateReward">> => {
      return signExecuteMethod(IncentiveCL, this, "calculateReward", params);
    },
    set: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"set">
    ): Promise<IncentiveCLTypes.SignExecuteMethodResult<"set">> => {
      return signExecuteMethod(IncentiveCL, this, "set", params);
    },
    deposit: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"deposit">
    ): Promise<IncentiveCLTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(IncentiveCL, this, "deposit", params);
    },
    unstake: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"unstake">
    ): Promise<IncentiveCLTypes.SignExecuteMethodResult<"unstake">> => {
      return signExecuteMethod(IncentiveCL, this, "unstake", params);
    },
    takeRemainigRewards: async (
      params: IncentiveCLTypes.SignExecuteMethodParams<"takeRemainigRewards">
    ): Promise<
      IncentiveCLTypes.SignExecuteMethodResult<"takeRemainigRewards">
    > => {
      return signExecuteMethod(
        IncentiveCL,
        this,
        "takeRemainigRewards",
        params
      );
    },
  };

  async multicall<Calls extends IncentiveCLTypes.MultiCallParams>(
    calls: Calls
  ): Promise<IncentiveCLTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends IncentiveCLTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<IncentiveCLTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | IncentiveCLTypes.MultiCallParams
      | IncentiveCLTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      IncentiveCL,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
