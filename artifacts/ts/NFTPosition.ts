/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as NFTPositionContractJson } from "../clamm/staking/NFTPosition.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  CurrentPoolInfo,
  FactoryProtectedData,
  FactoryRoles,
  ModifyLiquidity,
  ModifyLiquidityScriptParams,
  NewStruct,
  NextTick,
  PendingBalance,
  PoolData,
  PoolKey,
  Position,
  PositionKey,
  TickInfo,
  TickUpdateInfo,
  AllStructs,
} from "./types";

// Custom types for the contract
export namespace NFTPositionTypes {
  export type Fields = {
    manager: HexString;
    nftIndex: bigint;
    nftUriPrefix: HexString;
    pool: HexString;
    poolKey: PoolKey;
    positionKey: PositionKey;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getTokenUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getCollectionIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, bigint]>;
    };
    getVersion: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    burn: {
      params: CallContractParams<{ owner: Address; refundAddress: Address }>;
      result: CallContractResult<null>;
    };
    getPositionInfo: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Position>;
    };
    getPoolKey: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<PoolKey>;
    };
    getPositionKey: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<PositionKey>;
    };
    toHex: {
      params: CallContractParams<{ bytes: HexString }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getTokenUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCollectionIndex: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getVersion: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    burn: {
      params: SignExecuteContractMethodParams<{
        owner: Address;
        refundAddress: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getPositionInfo: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getPoolKey: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getPositionKey: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    toHex: {
      params: SignExecuteContractMethodParams<{ bytes: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  NFTPositionInstance,
  NFTPositionTypes.Fields
> {
  encodeFields(fields: NFTPositionTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  consts = { Version: BigInt("1") };

  at(address: string): NFTPositionInstance {
    return new NFTPositionInstance(address);
  }

  tests = {
    getTokenUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTokenUri", params, getContractByCodeHash);
    },
    getCollectionIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(
        this,
        "getCollectionIndex",
        params,
        getContractByCodeHash
      );
    },
    getVersion: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getVersion", params, getContractByCodeHash);
    },
    burn: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionTypes.Fields,
        { owner: Address; refundAddress: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "burn", params, getContractByCodeHash);
    },
    getPositionInfo: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Position>> => {
      return testMethod(this, "getPositionInfo", params, getContractByCodeHash);
    },
    getPoolKey: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<PoolKey>> => {
      return testMethod(this, "getPoolKey", params, getContractByCodeHash);
    },
    getPositionKey: async (
      params: Omit<
        TestContractParamsWithoutMaps<NFTPositionTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<PositionKey>> => {
      return testMethod(this, "getPositionKey", params, getContractByCodeHash);
    },
    toHex: async (
      params: TestContractParamsWithoutMaps<
        NFTPositionTypes.Fields,
        { bytes: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "toHex", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: NFTPositionTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const NFTPosition = new Factory(
  Contract.fromJson(
    NFTPositionContractJson,
    "",
    "29cdf0f1fa856ae84c1b32d1e2c406ab8c373f6740e7f3789603ca60ff0fd753",
    AllStructs
  )
);
registerContract(NFTPosition);

// Use this class to interact with the blockchain
export class NFTPositionInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTPositionTypes.State> {
    return fetchContractState(NFTPosition, this);
  }

  view = {
    getTokenUri: async (
      params?: NFTPositionTypes.CallMethodParams<"getTokenUri">
    ): Promise<NFTPositionTypes.CallMethodResult<"getTokenUri">> => {
      return callMethod(
        NFTPosition,
        this,
        "getTokenUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollectionIndex: async (
      params?: NFTPositionTypes.CallMethodParams<"getCollectionIndex">
    ): Promise<NFTPositionTypes.CallMethodResult<"getCollectionIndex">> => {
      return callMethod(
        NFTPosition,
        this,
        "getCollectionIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getVersion: async (
      params?: NFTPositionTypes.CallMethodParams<"getVersion">
    ): Promise<NFTPositionTypes.CallMethodResult<"getVersion">> => {
      return callMethod(
        NFTPosition,
        this,
        "getVersion",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    burn: async (
      params: NFTPositionTypes.CallMethodParams<"burn">
    ): Promise<NFTPositionTypes.CallMethodResult<"burn">> => {
      return callMethod(
        NFTPosition,
        this,
        "burn",
        params,
        getContractByCodeHash
      );
    },
    getPositionInfo: async (
      params?: NFTPositionTypes.CallMethodParams<"getPositionInfo">
    ): Promise<NFTPositionTypes.CallMethodResult<"getPositionInfo">> => {
      return callMethod(
        NFTPosition,
        this,
        "getPositionInfo",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPoolKey: async (
      params?: NFTPositionTypes.CallMethodParams<"getPoolKey">
    ): Promise<NFTPositionTypes.CallMethodResult<"getPoolKey">> => {
      return callMethod(
        NFTPosition,
        this,
        "getPoolKey",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPositionKey: async (
      params?: NFTPositionTypes.CallMethodParams<"getPositionKey">
    ): Promise<NFTPositionTypes.CallMethodResult<"getPositionKey">> => {
      return callMethod(
        NFTPosition,
        this,
        "getPositionKey",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    toHex: async (
      params: NFTPositionTypes.CallMethodParams<"toHex">
    ): Promise<NFTPositionTypes.CallMethodResult<"toHex">> => {
      return callMethod(
        NFTPosition,
        this,
        "toHex",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getTokenUri: async (
      params: NFTPositionTypes.SignExecuteMethodParams<"getTokenUri">
    ): Promise<NFTPositionTypes.SignExecuteMethodResult<"getTokenUri">> => {
      return signExecuteMethod(NFTPosition, this, "getTokenUri", params);
    },
    getCollectionIndex: async (
      params: NFTPositionTypes.SignExecuteMethodParams<"getCollectionIndex">
    ): Promise<
      NFTPositionTypes.SignExecuteMethodResult<"getCollectionIndex">
    > => {
      return signExecuteMethod(NFTPosition, this, "getCollectionIndex", params);
    },
    getVersion: async (
      params: NFTPositionTypes.SignExecuteMethodParams<"getVersion">
    ): Promise<NFTPositionTypes.SignExecuteMethodResult<"getVersion">> => {
      return signExecuteMethod(NFTPosition, this, "getVersion", params);
    },
    burn: async (
      params: NFTPositionTypes.SignExecuteMethodParams<"burn">
    ): Promise<NFTPositionTypes.SignExecuteMethodResult<"burn">> => {
      return signExecuteMethod(NFTPosition, this, "burn", params);
    },
    getPositionInfo: async (
      params: NFTPositionTypes.SignExecuteMethodParams<"getPositionInfo">
    ): Promise<NFTPositionTypes.SignExecuteMethodResult<"getPositionInfo">> => {
      return signExecuteMethod(NFTPosition, this, "getPositionInfo", params);
    },
    getPoolKey: async (
      params: NFTPositionTypes.SignExecuteMethodParams<"getPoolKey">
    ): Promise<NFTPositionTypes.SignExecuteMethodResult<"getPoolKey">> => {
      return signExecuteMethod(NFTPosition, this, "getPoolKey", params);
    },
    getPositionKey: async (
      params: NFTPositionTypes.SignExecuteMethodParams<"getPositionKey">
    ): Promise<NFTPositionTypes.SignExecuteMethodResult<"getPositionKey">> => {
      return signExecuteMethod(NFTPosition, this, "getPositionKey", params);
    },
    toHex: async (
      params: NFTPositionTypes.SignExecuteMethodParams<"toHex">
    ): Promise<NFTPositionTypes.SignExecuteMethodResult<"toHex">> => {
      return signExecuteMethod(NFTPosition, this, "toHex", params);
    },
  };

  async multicall<Calls extends NFTPositionTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NFTPositionTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends NFTPositionTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<NFTPositionTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | NFTPositionTypes.MultiCallParams
      | NFTPositionTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      NFTPosition,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
